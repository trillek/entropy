#define MASK_ZERO 1
#define MASK_NORMAL 2
#define MASK_INF 4
#define MASK_NAN 8
#define SIGN 0
#define EXP 1
#define HIGH 2
#define LOW 3
#define MASK 4
#segment data
:CONST_1F dat 0x0000, 0x007f, 0x8000, 0x0000, MASK_NORMAL
:CONST_10F dat 0x0000, 0x0082, 0xa000, 0x0000, MASK_NORMAL
:CONST_NAN dat 0xffff, 0xffff, 0xffff, 0xffff, MASK_NAN
:CONST_INF dat 0x0000, 0xffff, 0x0000, 0x0000, MASK_INF
:CONST_ZERO dat 0x0000, 0x0000, 0x0000, 0x0000, MASK_ZERO
:s_nan dat "NaN", 0
:s_ninf dat "-"
:s_inf dat "Inf", 0
:s_nzero dat "-"
:s_zero dat "0.0", 0
#segment code
:atof
set push, 2
set push, 5
jsr nc_preamble
:atof_begin
set push, [z+12]
set push, z
sub peek, 5
jsr reg_atof
set push, z
sub peek, 5
set push, [z+11]
jsr reg_to_float
jsr nc_postamble
:ftoa
set push, 2
set push, 5
jsr nc_preamble
:ftoa_begin
set push, [z+12]
set push, z
sub peek, 5
jsr float_to_reg
set push, z
sub peek, 5
set push, [z+11]
jsr reg_ftoa
jsr nc_postamble
:itof
set push, 2
set push, 5
jsr nc_preamble
:itof_begin
set push, [z+12]
set push, z
sub peek, 5
jsr int_to_reg
set push, z
sub peek, 5
set push, [z+11]
jsr reg_to_float
jsr nc_postamble
:ftoi
set push, 2
set push, 5
jsr nc_preamble
:ftoi_begin
set push, [z+12]
set push, z
sub peek, 5
jsr float_to_reg
set push, z
sub peek, 5
set push, [z+11]
jsr reg_to_int
jsr nc_postamble
:fcmp
set push, 2
set push, 10
jsr nc_preamble
:fcmp_begin
set push, [z+12]
set push, z
sub peek, 10
jsr float_to_reg
set push, [z+11]
set push, z
sub peek, 5
jsr float_to_reg
set push, z
sub peek, 10
set push, z
sub peek, 5
jsr reg_cmp
jsr nc_postamble
:fsub
set push, 3
set push, 10
jsr nc_preamble
:fsub_begin
set a, reg_sub
set pc, nc_init_arithmetic
:fadd
set push, 3
set push, 10
jsr nc_preamble
:fadd_begin
set a, reg_add
set pc, nc_init_arithmetic
:fmul
set push, 3
set push, 10
jsr nc_preamble
:fmul_begin
set a, reg_mul
set pc, nc_init_arithmetic
:fdiv
set push, 3
set push, 10
jsr nc_preamble
:fdiv_begin
set a, reg_div
set pc, nc_init_arithmetic
:nc_init_arithmetic
set push, [z+12]
set push, z
sub peek, 10
jsr float_to_reg
set push, [z+11]
set push, z
sub peek, 5
jsr float_to_reg
set push, z
sub peek, 10
set push, z
sub peek, 5
jsr a
set push, z
sub peek, 10
set push, [z+13]
jsr reg_to_float
jsr nc_postamble
:nc_nan2ireg_postamble2
jsr nc_nan2ireg
jsr nc_postamble
:nc_pinf2ireg_postamble2
jsr nc_pinf2ireg
jsr nc_postamble
:nc_inf2ireg_postamble2
jsr nc_inf2ireg
jsr nc_postamble
:nc_pzero2ireg_postamble2
jsr nc_pzero2ireg
jsr nc_postamble
:nc_zero2ireg_postamble2
jsr nc_zero2ireg
jsr nc_postamble
:float_to_reg
set push, 2
set push, 0
jsr nc_preamble
:float_to_reg_begin
set i, [z+11]
set j, [z+12]
set a, [j]
set b, a
and b, 0x8000
set [SIGN+i], b
set b, a
shr a, 7
and a, 0x00ff
set [EXP+i], a
and b, 0x007f
shl b, 8
set c, [j+1]
shl c, 8
bor b, ex
set [LOW+i], c
bor c, b
set j, MASK_NORMAL
ifn a, 255
set pc, float_to_reg_1
ife c, 0
set j, MASK_INF
ifn c, 0
set j, MASK_NAN
:float_to_reg_1
bor c, a
ife c, 0
set j, MASK_ZERO
set [MASK+i], j
ife j, MASK_NORMAL
bor b, 0x8000
set [HIGH+i], b
jsr nc_postamble
:reg_to_float
set push, 2
set push, 0
jsr nc_preamble
:reg_to_float_begin
set i, [z+12]
set j, [z+11]
set a, [EXP+i]
shl a, 7
bor a, [SIGN+i]
set b, [HIGH+i]
shl b, 1
shl b, 7
bor a, ex
set [j], a
set c, [LOW+i]
shl c, 8
bor b, ex
set [1+j], b
jsr nc_postamble
:int_to_reg
set push, 2
set push, 0
jsr nc_preamble
:int_to_reg_begin
set i, [z+11]
set j, [z+12]
set x, [ j]
set y, [1+j]
set j, x
bor j, y
ifg j, 0
set pc, int_to_reg_sign
set pc, nc_pzero2ireg_postamble2
:int_to_reg_sign
set [SIGN+i], 0x0000
ifg 0x8000, x
set pc, int_to_reg_exp
set [SIGN+i], 0x8000
xor x, 0xffff
xor y, 0xffff
add y, 1
add x, ex
:int_to_reg_exp
set a, 158
:int_to_reg_normalize
ifb x, 0x8000
set pc, int_to_reg_store
shl x, 1
shl y, 1
bor x, ex
sub a, 1
set pc, int_to_reg_normalize
:int_to_reg_store
set [EXP+i], a
set [HIGH+i], x
set [LOW+i], y
set [MASK+i], MASK_NORMAL
jsr nc_postamble
:uint16_to_reg
set push, 2
set push, 0
jsr nc_preamble
:uint16_to_reg_begin
set i, [z+11]
set x, [z+12]
ifg x, 0
set pc, uint16_to_reg_exp
set pc, nc_pzero2ireg_postamble2
:uint16_to_reg_exp
set a, 142
:uint16_to_reg_normalize
ifb x, 0x8000
set pc, uint16_to_reg_store
shl x, 1
sub a, 1
set pc, uint16_to_reg_normalize
:uint16_to_reg_store
set [SIGN+i], 0x0000
set [EXP+i], a
set [HIGH+i], x
set [LOW+i], 0
set [MASK+i], MASK_NORMAL
jsr nc_postamble
:reg_to_int
set push, 2
set push, 0
jsr nc_preamble
:reg_to_int_begin
set i, [z+12]
set j, [z+11]
set a, [MASK+i]
ife a, MASK_NAN
set pc, reg_to_int_error
ife a, MASK_INF
set pc, reg_to_int_error
ife a, MASK_ZERO
set pc, reg_to_int_zero
set b, [EXP+i]
ifg 127, b
set pc, reg_to_int_zero
ifg b, 157
set pc, reg_to_int_error
set a, 158
sub a, b
set b, [HIGH+i]
set c, [LOW+i]
shr c, a
shr b, a
bor c, ex
ife 0, [SIGN+i]
set pc, reg_to_int_store_result
xor c, 0xffff
xor b, 0xffff
add c, 1
add b, ex
:reg_to_int_store_result
set [j], b
set [1+j], c
set x, 0
jsr nc_postamble
:reg_to_int_zero
set [j], 0
set [1+j], 0
set x, 0
jsr nc_postamble
:reg_to_int_error
set x, -1
jsr nc_postamble
:reg_to_uint16
set push, 1
set push, 0
jsr nc_preamble
:reg_to_uint16_begin
set i, [z+11]
ifn [SIGN+i], 0
set pc, reg_to_uint16_zero
set a, [MASK+i]
ifn a, MASK_NORMAL
set pc, reg_to_uint16_zero
set b, [EXP+i]
ifg 127, b
set pc, reg_to_uint16_zero
ifg b, 142
set pc, reg_to_uint16_zero
set a, 142
sub a, b
set x, [HIGH+i]
shr x, a
:reg_to_uint16_finish
jsr nc_postamble
:reg_to_uint16_zero
set x, 0
jsr nc_postamble
:reg_cmp
set push, 2
set push, 5
jsr nc_preamble
:reg_cmp_begin
set j, [z+12]
set i, z
sub i, 5
jsr nc_jreg2ireg
set i, z
sub i, 5
set push, i
set push, [z+11]
jsr reg_sub
set x, 0
ife [MASK+i], MASK_ZERO
jsr nc_postamble
set x, 1
ife [SIGN+i], 0
jsr nc_postamble
set x, -1
jsr nc_postamble
:nc_pzero2ireg
set j, CONST_ZERO
set pc, nc_jreg2ireg
:nc_zero2ireg
set j, CONST_ZERO
set pc, nc_jreg2ireg_no_sign
:nc_pinf2ireg
set j, CONST_INF
set pc, nc_jreg2ireg
:nc_inf2ireg
set j, CONST_INF
set pc, nc_jreg2ireg_no_sign
:nc_nan2ireg
set j, CONST_NAN
set pc, nc_jreg2ireg
:nc_jreg2ireg
set [SIGN+i], [SIGN+j]
:nc_jreg2ireg_no_sign
set [EXP+i], [EXP+j]
set [HIGH+i], [HIGH+j]
set [LOW+i], [LOW+j]
set [MASK+i], [MASK+j]
set pc, pop
:reg_sub
set push, 2
set push, 5
jsr nc_preamble
:reg_sub_begin
set j, [z+11]
set i, z
sub i, 5
jsr nc_jreg2ireg
set i, [z+12]
set j, z
sub j, 5
xor [SIGN+j], 0x8000
set pc, reg_add_1
:reg_add
set push, 2
set push, 5
jsr nc_preamble
:reg_add_begin
set j, [z+11]
set i, z
sub i, 5
jsr nc_jreg2ireg
set i, [z+12]
set j, z
sub j, 5
:reg_add_1
set a, [MASK+i]
set b, [MASK+j]
set c, a
xor c, b
ifb c, MASK_NAN
set pc, nc_nan2ireg_postamble2
ifb c, MASK_INF
set pc, reg_add_inf
ifb c, MASK_ZERO
set pc, reg_add_zero
:reg_add_load_registers
set a, [HIGH+i]
set b, [LOW+i]
set x, [HIGH+j]
set y, [LOW+j]
ifg [EXP+i], [EXP+j]
set pc, reg_add_align_exp
ifg [EXP+j], [EXP+i]
set pc, reg_add_swap
ifg a, x
set pc, reg_add_select_operator
ifg x, a
set pc, reg_add_swap
ifg b, y
set pc, reg_add_select_operator
ifg y, b
set pc, reg_add_swap
ifg [SIGN+i], [SIGN+j]
set pc, reg_add_swap_sign
set pc, reg_add_select_operator
:reg_add_swap
set c, a
set a, x
set x, c
set c, b
set b, y
set y, c
set c, [EXP+i]
set [EXP+i], [EXP+j]
set [EXP+j], c
:reg_add_swap_sign
set c, [SIGN+i]
set [SIGN+i], [SIGN+j]
set [SIGN+j], c
:reg_add_align_exp
set c, [EXP+j]
sub c, [EXP+i]
xor c, 0xffff
add c, 1
ifg c, 31
set pc, reg_add_finish_ab
shr y, c
shr x, c
bor y, ex
:reg_add_select_operator
ife [SIGN+i], [SIGN+j]
set pc, reg_add_addition
sub b, y
add a, ex
sub a, x
set c, 0
:reg_add_subtract_shift_left
ifb a, 0x8000
set pc, reg_add_subtract_exp
ifn c, 32
set pc, reg_add_subtract_shift_left_1
set pc, nc_zero2ireg_postamble2
:reg_add_subtract_shift_left_1
shl a, 1
shl b, 1
bor a, ex
add c, 1
set pc, reg_add_subtract_shift_left
:reg_add_subtract_exp
sub [EXP+i], c
ife ex, 0xffff
set pc, nc_zero2ireg_postamble2
set pc, reg_add_finish_ab
:reg_add_addition
add b, y
add a, ex
set c, ex
add a, x
bor c, ex
ife c, 0
set pc, reg_add_finish_ab
add [EXP+i], 1
ife [EXP+i], 0x00ff
set pc, nc_inf2ireg_postamble2
shr b, 1
shr a, 1
bor b, ex
bor a, 0x8000
:reg_add_finish_ab
set [HIGH+i], a
set [LOW+i], b
jsr nc_postamble

:reg_add_inf
ifn c, MASK_INF
set pc, reg_add_inf_single
ife [SIGN+i], [SIGN+j]
set pc, nc_inf2ireg_postamble2
set pc, nc_nan2ireg_postamble2
:reg_add_inf_single
ife b, MASK_INF
set [SIGN+i], [SIGN+j]
set pc, nc_inf2ireg_postamble2
:reg_add_zero
ifn c, MASK_ZERO
set pc, reg_add_zero_single
and [SIGN+i], [SIGN+j]
set pc, nc_zero2ireg_postamble2
:reg_add_zero_single
ife a, MASK_ZERO
jsr nc_jreg2ireg
jsr nc_postamble
:reg_mul
set push, 2
set push, 0
jsr nc_preamble
:reg_mul_begin
set i, [z+12]
set j, [z+11]
xor [SIGN+i], [SIGN+j]
set a, [MASK+i]
bor a, [MASK+j]
ifb a, MASK_NAN
set pc, nc_nan2ireg_postamble2
ife a, 5
set pc, nc_nan2ireg_postamble2
ifb a, MASK_ZERO
set pc, nc_zero2ireg_postamble2
ifb a, MASK_INF
set pc, nc_inf2ireg_postamble2
set x, [LOW+j]
mul x, [LOW+i]
set c, ex
set y, [LOW+j]
mul y, [HIGH+i]
set b, ex
add c, y
add b, ex
set y, [HIGH+j]
mul y, [LOW+i]
add b, ex
set a, ex
add c, y
add b, ex
add a, ex
set y, [HIGH+j]
mul y, [HIGH+i]
add a, ex
add b, y
add a, ex
set y, [EXP+i]
add y, [EXP+j]
add y, 1
ifb a, 0x8000
set pc, reg_mul_exp
sub y, 1
shl a, 1
shl b, 1
bor a, ex
shl c, 1
bor b, ex
:reg_mul_exp
ifg 128, y
set pc, nc_zero2ireg_postamble2
sub y, 127
ifg y, 254
set pc, nc_inf2ireg_postamble2
set [EXP+i], y
set [HIGH+i], a
set [LOW+i], b
jsr nc_postamble
:reg_div
set push, 2
set push, 0
jsr nc_preamble
:reg_div_begin
set i, [z+12]
set j, [z+11]
xor [SIGN+i], [SIGN+j]
set a, [MASK+i]
set b, [MASK+j]
set c, a
bor c, b
ifb c, MASK_NAN
set pc, nc_nan2ireg_postamble2
ife c, MASK_INF
set pc, nc_nan2ireg_postamble2
ife c, MASK_ZERO
set pc, nc_nan2ireg_postamble2
ife a, MASK_INF
set pc, nc_inf2ireg_postamble2
ife b, MASK_INF
set pc, nc_zero2ireg_postamble2
ife a, MASK_ZERO
set pc, nc_zero2ireg_postamble2
ife b, MASK_ZERO
set pc, nc_inf2ireg_postamble2
set x, 0
set b, 1
:reg_div_check_subtract
set y, 1
ifg [LOW+j], [LOW+i]
set y, 0
ifg [HIGH+j], [HIGH+i]
set y, 0
ifg [HIGH+i], [HIGH+j]
set y, 1
:reg_div_next_bit
shl b, 1
bor b, y
ife 0, ex
set pc, reg_div_no_word
ife x, 1
set pc, reg_div_exp
add x, 1
set a, b
set b, 1
:reg_div_no_word
ife y, 1
set pc, reg_div_subtract
:reg_div_shift
shl [HIGH+i], 1
set y, ex
shl [LOW+i], 1
bor [HIGH+i], ex
ife y, 1
set pc, reg_div_next_bit
ifg [HIGH+i], 0x7fff
set pc, reg_div_check_subtract
set pc, reg_div_next_bit
:reg_div_subtract
sub [LOW+i], [LOW+j]
add [HIGH+i], ex
sub [HIGH+i], [HIGH+j]
set pc, reg_div_shift
:reg_div_exp
set c, 127
add c, [EXP+i]
sub c, [EXP+j]
ife ex, 0xffff
set pc, nc_zero2ireg_postamble2
ife c, 0
set pc, nc_zero2ireg_postamble2
ifg c, 254
set pc, nc_inf2ireg_postamble2
:reg_div_normalize
ifb a, 0x8000
set pc, reg_div_finish
shl a, 1
shl b, 1
bor a, ex
sub c, 1
set pc, reg_div_normalize
:reg_div_finish
set [EXP+i], c
set [HIGH+i], a
set [LOW+i], b
jsr nc_postamble
:reg_pow10
set push, 2
set push, 0
jsr nc_preamble
:reg_pow10_begin
set j, CONST_1F
set i, [z+11]
jsr nc_jreg2ireg
set a, [z+12]
set b, 1
ifg 0x8000, a
set b, -1
:reg_pow10_calc
ife a, 0
jsr nc_postamble
add a, b
set push, i
set push, CONST_10F
jsr reg_mul
set pc, reg_pow10_calc
#define atof_start 1
#define atof_sign 2
#define atof_whole 4
#define atof_point 8
#define atof_frac 16
#define atof_exp 32
#define atof_esign 64
#define atof_enum 128
:reg_atof
set push, 2
set push, 11
jsr nc_preamble
:reg_atof_begin
set [z-1], 0
set [z-2], 0
set [z-3], 0
set [z-4], 0
set [z-5], 0
set c, [z+12]
set [z-11], c
set i, [z+11]
jsr nc_pzero2ireg
set j, z
sub j, 10
set a, 1
:reg_atof_loop
set c, [z-11]
add [z-11], 1
set c, [c]
ife c, '+'
set pc, reg_atof_plus
ife c, '-'
set pc, reg_atof_minus
ife c, 'e'
set pc, reg_atof_exponent
ife c, 'E'
set pc, reg_atof_exponent
ife c, '.'
set pc, reg_atof_decimal_point
ifg c, '9'
set pc, reg_atof_end
ifg '0', c
set pc, reg_atof_end
sub c, '0'
ifb a, 224
set pc, reg_atof_exponent_number
ifb a, 24
set pc, reg_atof_decimal_number
ifb a, 7
set pc, reg_atof_whole_number
set pc, reg_atof_end
:reg_atof_decimal_number
set a, 16
ife [z-1], 10
set pc, reg_atof_loop
sub [z-2], 1
set pc, reg_atof_add_significant
:reg_atof_whole_number
set a, 4
set x, c
bor x, [z-1]
ife x, 0
set pc, reg_atof_loop
ife [z-1], 10
set pc, reg_atof_significant_full
:reg_atof_add_significant
set push, i
set push, CONST_10F
jsr reg_mul
set x, c
bor x, [z-1]
ife x, 0
set pc, reg_atof_loop
set push, c
set push, j
jsr uint16_to_reg
set push, i
set push, j
jsr reg_add
add [z-1], 1
set pc, reg_atof_loop
:reg_atof_significant_full
add [z-2], 1
set pc, reg_atof_loop
:reg_atof_exponent_number
set a, 128
mul [z-3], 10
ifg [z-3], 100
set pc, nc_inf2ireg_postamble2
add [z-3], c
set pc, reg_atof_loop
:reg_atof_minus
ifb a, 1
set pc, reg_atof_mantissa_minus
ifb a, 32
set pc, reg_atof_exponent_minus
set pc, reg_atof_end
:reg_atof_mantissa_minus
set a, 2
set [z-4], 0x8000
set pc, reg_atof_loop
:reg_atof_exponent_minus
set a, 64
set [z-5], 0x8000
set pc, reg_atof_loop
:reg_atof_plus
ifb a, 1
set pc, reg_atof_mantissa_plus
ifb a, 32
set pc, reg_atof_exponent_plus
set pc, reg_atof_end
:reg_atof_mantissa_plus
set a, 2
set pc, reg_atof_loop
:reg_atof_exponent_plus
set a, 64
set pc, reg_atof_loop
:reg_atof_decimal_point
ifb a, 7
set pc, reg_atof_decimal_point_mantissa
set pc, reg_atof_end
:reg_atof_decimal_point_mantissa
set a, 8
set pc, reg_atof_loop
:reg_atof_exponent
ifb a, 23
set pc, reg_atof_exponent_ok
set pc, reg_atof_end
:reg_atof_exponent_ok
set a, 32
set pc, reg_atof_loop
:reg_atof_end
ifc a, 1
set pc, reg_atof_end_inf
set push, [z-11]
set push, s_nan
set push, 1
set push, 3
jsr strcmp
ifn x, 0
set pc, reg_atof_end_inf
jsr nc_nan2ireg
set x, 3
jsr nc_postamble
:reg_atof_end_inf
ifc a, 3
set pc, reg_atof_end_normal
set push, [z-11]
set push, s_inf
set push, 1
set push, 3
jsr strcmp
ifn x, 0
set pc, reg_atof_end_zero
set j, CONST_INF
set pc, reg_atof_end_const
:reg_atof_end_zero
set push, [z-11]
set push, s_zero
set push, 1
set push, 3
jsr strcmp
ifn x, 0
set pc, reg_atof_end_normal
set j, CONST_ZERO
:reg_atof_end_const
jsr nc_jreg2ireg_no_sign
set [SIGN+i], [z-4]
set x, 3
ife a, 2
add x, 1
jsr nc_postamble
:reg_atof_end_normal
ifc a, 107
set pc, reg_atof_end_normal_valid
jsr nc_nan2ireg
set x, 0
jsr nc_postamble
:reg_atof_end_normal_valid
set [SIGN+i], [z-4]
ifn [MASK+i], MASK_NORMAL
jsr nc_postamble
ifn [z-5], 0x8000
set pc, reg_atof_end_adjust_exp
xor [z-3], 0xffff
add [z-3], 1
set pc, reg_atof_end_adjust_exp
:reg_atof_end_adjust_exp
add [z-3], [z-2]
:reg_atof_end_exp_loop
ife [z-3], 0
jsr nc_postamble
ifg 0x8000, [z-3]
set pc, reg_atof_end_mult
set push, i
set push, CONST_10F
jsr reg_div
add [z-3], 1
set pc, reg_atof_end_exp_loop
:reg_atof_end_mult
set push, i
set push, CONST_10F
jsr reg_mul
sub [z-3], 1
set pc, reg_atof_end_exp_loop
:reg_ftoa
set push, 2
set push, 10
jsr nc_preamble
:reg_ftoa_begin
set j, [z+12]
set i, z
sub i, 5
jsr nc_jreg2ireg
set j, [z+11]
ifn [MASK+i], MASK_NAN
set pc, ftoa_check_inf
set x, s_nan
        set pc, ftoa_copy_and_return
:ftoa_check_inf
ifn [MASK+i], MASK_INF
set pc, ftoa_check_zero
set x, s_ninf
set pc, ftoa_check_sign
:ftoa_check_zero
ifn [MASK+i], MASK_ZERO
set pc, ftoa_convert
set x, s_nzero
set pc, ftoa_check_sign
:ftoa_check_sign
ife [SIGN+i], 0
add x, 1
:ftoa_copy_and_return
ife [x], 0
set pc, ftoa_finish
set [j], [x]
add j, 1
add x, 1
set pc, ftoa_copy_and_return
:ftoa_convert
set a, 1
set b, 0
ife [SIGN+i], 0
set pc, ftoa_scale
set [j], '-'
add j, 1
set [i+SIGN], 0
:ftoa_scale
set push, i
set push, CONST_10F
jsr reg_cmp
ife x, -1
set pc, ftoa_print
set push, i
set push, CONST_10F
jsr reg_div
add a, 1
set pc, ftoa_scale
:ftoa_print
set push, i
jsr reg_to_uint16
set push, x
set c, x
add x, '0'
set [j], x
add j, 1
set push, z
sub peek, 10
jsr uint16_to_reg
set push, i
set push, z
sub peek, 10
jsr reg_sub
ife [MASK+i], MASK_ZERO
set pc, ftoa_fill_with_zero
bor c, b
ife c, 0
set pc, ftoa_scale_up
add b, 1
ife b, 9
set pc, ftoa_fill_with_zero
:ftoa_scale_up
set push, i
set push, CONST_10F
jsr reg_mul
sub a, 1
ifn a, 0
set pc, ftoa_print
set [j], '.'
add j, 1
set pc, ftoa_print
:ftoa_fill_with_zero
sub a, 1
ife a, 0
set pc, ftoa_finish
ifb a, 0x8000
set pc, ftoa_finish
set [j], '0'
add j, 1
set pc, ftoa_fill_with_zero
:ftoa_finish
set [j], 0
set x, [z+11]
sub j, x
set x, j
jsr nc_postamble
:nc_postamble
set sp, z
set z, pop
set y, pop
set j, pop
set i, pop
set c, pop
set b, pop
set a, pop
add sp, 2
add [sp], sp
add [sp], 1
set push, z
set z, [sp+1]
set [z], [sp+2]
set z, pop
set sp, [sp]
set pc, pop
:nc_preamble
set push, a
set push, b
set push, c
set push, i
set push, j
set push, y
set push, z
set z, sp
sub sp, [z + 8]
set pc, [z + 7]
:strcmp
set push, 4
set push, 0
jsr nc_preamble
set i, [z + 14]
set j, [z + 13]
set c, [z + 12]
set y, [z + 11]
:strcmp_loop
set a, [i]
sti b, [j]
ife a, 0
set pc, strcmp_finish
ife y, 0
set pc, strcmp_finish
sub y, 1
ife c, 0
set pc, strcmp_loop_check
ifg a, 'A'-1
ifl a, 'Z'+1
add a, 'a' - 'A'
ifg b, 'A'-1
ifl b, 'Z'+1
add b, 'a' - 'A'
:strcmp_loop_check
ife a, b
set pc, strcmp_loop
:strcmp_finish
set x, 0
ifl a, b
set x, -1
ifg a, b
set x, 1
jsr nc_postamble