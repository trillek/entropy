#define max_proc_num			16		
#define sigs_per_proc			16
#define ERR_missed_interrupts	0x0104	
#define ERR_signal_queue_full	0x0105	
:fn_request_handler_k 
set push, b
iaq 1
set b, interrupt_header_start
:.loop_a
ife [b], -1
set pc, .found_space
ife b, interrupt_header_end - 2
set pc, .no_space
add b, 2
set pc, .loop_a
:.found_space
set [b], 0
set [b+1], a
add pc, 1 
:.no_space
set a, -1
iaq 0
set b, pop
set pc, pop
:fn_free_handler 
shl a, 1 
add a, interrupt_header_start
set [a], -1
set [a+1], -1
set pc, pop
:fn_request_handler 
set push, b
iaq 1
set b, interrupt_header_start
:.loop_a
ife [b], -1
set pc, .found_space
ife b, interrupt_header_end - 2
set pc, .no_space
add b, 2
set pc, .loop_a
:.found_space
set [b], [current_process]
set [b+1], a
set a, b
sub a, interrupt_header_start
shr a, 1 
add pc, 1 
:.no_space
set a, -1
iaq 0
set b, pop
set pc, pop
:fn_set_signal_handler 
set push, b
set b, [current_process]
add b, signal_handler_table_start
set [b], a
set b, pop
set pc, pop
:fn_init_IM 
set push, i
set push, j
ias interrupt_address
set i, interrupt_header_start 
:.loop_a
sti [i], -1
sti [i], -1
sti [i], -1
sti [i], -1
ifn i, interrupt_header_end
set pc, .loop_a
set j, pop
set i, pop
set pc, pop
:fn_check_signals 
set push, a
set push, b
set push, c
set push, i
set push, j
iaq 1
set i, [current_process]
set j, 0
set c, i
set c, [c+signal_handler_table_start] 
ife c, 0
set pc, .done 
shl i, 5 
add i, signal_table_start 
:.loop_a
sti a, [i]
ife a, 0
set pc, .cleanup
sti b, [i]
jsr c
ifn j, 32
set pc, .loop_a
:.cleanup
sub i, j
add j, i
set c, i
add c, (sigs_per_proc * 2) - 2
:.loop_b 
sti [i], [j]
sti [i], [j]
ife [j], 0
set pc, .loop_c
ifn j, c
set pc, .loop_b
:.loop_c
sti [i], 0
sti [i], 0
ifn i, c
set pc, .loop_c
:.done
iaq 0
set j, pop
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop
:fn_send_signal 
set push, c
iaq 1
shl a, 5 
add a, signal_table_start - 1
set c, a
add c, sigs_per_proc * 2
:.loop_a
add a, 1
ife a, c
set pc, .no_space
ifn [a], 0
set pc, .loop_a
set [a], b
set [a+1], [current_process]
set a, 0
add pc, 2
:.no_space
set a, ERR_signal_queue_full
iaq 0
set c, pop
set pc, pop
:interrupt_address 
set push, b
set push, c
set push, x
iaq 1
set b, a
shl b, 1 
add b, interrupt_header_start
ife [b], -1
set pc, .no_handler
ife [b], 0
set pc, .kernel_handler
ife [b], [current_process]
set pc, .current_handler
set c, [b] 
shl c, 5 
add c, signal_table_start
set x, c
add x, sigs_per_proc
:.loop_a
ife c, x
set pc, .queue_overflow
ife [c], 0
set pc, .found_space
add c, 2
set pc, .loop_a
:.queue_overflow
sub c, 2
set [c], ERR_missed_interrupts
set pc, .finish
:.found_space
set [c], [b+1]
set [c+1], 0
set pc, .finish
:.kernel_handler 
jsr [b+1]
set pc, .finish
:.current_handler 
set a, [b]
shl a, 1 
add a, (interrupt_header_start + 1)
set a, [a]
set c, [b]
add c, signal_handler_table_start
jsr [c]
:.no_handler 
:.finish
iaq 0
set x, pop
set c, pop
set b, pop
rfi 0
:interrupt_header_start 
#reserve 32		
:interrupt_header_end
:signal_handler_table_start
#reserve 16
:signal_table_start 
#reserve 512	